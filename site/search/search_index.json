{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. cd [dir-name] - redirect to the directory. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs gh-deploy - deploy the gh-page site. mkdocs help - Print this help message. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Preface"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. cd [dir-name] - redirect to the directory. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs gh-deploy - deploy the gh-page site. mkdocs help - Print this help message.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"template/","text":"Project Title Readme file temple quotes from PurpleBooth Github: (https://gist.github.com/PurpleBooth/109311bb0361f32d87a2) Getting Started These instructions will get you a copy of the project up and running on your local machine for development and testing purposes. See deployment for notes on how to deploy the project on a live system. Prerequisites What things you need to install the software and how to install them Give examples Installing A step by step series of examples that tell you how to get a development env running Say what the step will be Give the example And repeat until finished End with an example of getting some data out of the system or using it for a little demo Running the tests Explain how to run the automated tests for this system Break down into end to end tests Explain what these tests test and why Give an example And coding style tests Explain what these tests test and why Give an example Deployment Add additional notes about how to deploy this on a live system Built With Dropwizard - The web framework used Maven - Dependency Management ROME - Used to generate RSS Feeds Contributing Please read CONTRIBUTING.md for details on our code of conduct, and the process for submitting pull requests to us. Versioning We use SemVer for versioning. For the versions available, see the tags on this repository . Authors Billie Thompson - Initial work - PurpleBooth See also the list of contributors who participated in this project. License This project is licensed under the MIT License - see the LICENSE.md file for details Acknowledgments Hat tip to anyone whose code was used Inspiration etc","title":"About"},{"location":"template/#project-title","text":"Readme file temple quotes from PurpleBooth Github: (https://gist.github.com/PurpleBooth/109311bb0361f32d87a2)","title":"Project Title"},{"location":"template/#getting-started","text":"These instructions will get you a copy of the project up and running on your local machine for development and testing purposes. See deployment for notes on how to deploy the project on a live system.","title":"Getting Started"},{"location":"template/#prerequisites","text":"What things you need to install the software and how to install them Give examples","title":"Prerequisites"},{"location":"template/#installing","text":"A step by step series of examples that tell you how to get a development env running Say what the step will be Give the example And repeat until finished End with an example of getting some data out of the system or using it for a little demo","title":"Installing"},{"location":"template/#running-the-tests","text":"Explain how to run the automated tests for this system","title":"Running the tests"},{"location":"template/#break-down-into-end-to-end-tests","text":"Explain what these tests test and why Give an example","title":"Break down into end to end tests"},{"location":"template/#and-coding-style-tests","text":"Explain what these tests test and why Give an example","title":"And coding style tests"},{"location":"template/#deployment","text":"Add additional notes about how to deploy this on a live system","title":"Deployment"},{"location":"template/#built-with","text":"Dropwizard - The web framework used Maven - Dependency Management ROME - Used to generate RSS Feeds","title":"Built With"},{"location":"template/#contributing","text":"Please read CONTRIBUTING.md for details on our code of conduct, and the process for submitting pull requests to us.","title":"Contributing"},{"location":"template/#versioning","text":"We use SemVer for versioning. For the versions available, see the tags on this repository .","title":"Versioning"},{"location":"template/#authors","text":"Billie Thompson - Initial work - PurpleBooth See also the list of contributors who participated in this project.","title":"Authors"},{"location":"template/#license","text":"This project is licensed under the MIT License - see the LICENSE.md file for details","title":"License"},{"location":"template/#acknowledgments","text":"Hat tip to anyone whose code was used Inspiration etc","title":"Acknowledgments"},{"location":"LeetCode0001_TwoSum/lc0001/","text":"1. Two Sum Description Given an array of integers, return indices of the two numbers such that they add up to a specific target. You may assume that each input would have exactly one solution, and you may not use the same element twice. Example Given nums = [2, 7, 11, 15], target = 9, Because nums[0] + nums[1] = 2 + 7 = 9, return [0, 1]. Java public int[] twoSum(int[] nums, int target) { HashMap Integer, Integer map = new HashMap (); for(int i = 0; i nums.length; i++) { if(map.containsKey(target - nums[i]) map.get(target - nums[i]) != i) { return new int[]{map.get(target - nums[i]), i}; } map.put(nums[i], i); } return new int[]{}; } JavaScript var twoSum = function(nums, target) { var res = []; var map = new Map(); for(var i = 0; i nums.length; i++) { if(map.has(target - nums[i])) { res.push(map.get(target - nums[i])); res.push(i); return res; } map.set(nums[i], i); } return res; } C++ public: vector int twoSum(vector int nums, int target) { unordered_map int, int map; for(int i = 0; i nums.size(); i++) { if(map.count(target - nums[i])) { return {map[target - nums[i]], i}; } map[nums[i]] = i; } return {}; } C struct node{ int key; int val; int count; struct node* next; }; struct table{ int size; struct node** list; }; struct table* createTable(int size) { struct table* t = (struct table*)malloc(sizeof(struct table)); t- size = size; t- list = (struct node**)malloc(sizeof(struct node*) * size); for(int i = 0; i size; i++) { t- list[i] = NULL; } return t; } int hashCode(struct table *t, int key) { if(key 0) return -(key % t- size); return key % t- size; } void insert(struct table *t, int key, int val) { int pos = hashCode(t, key); struct node* list = t- list[pos]; struct node* newNode = (struct node*)malloc(sizeof(struct node)); struct node* temp = list; while(temp) { if(temp- key == key){ temp- count = temp- count + 1; return; } temp = temp- next; } newNode- key = key; newNode- val = val; newNode- count = 1; newNode- next = list; t- list[pos] = newNode; return; } int search(struct table* t, int key) { int pos = hashCode(t, key); struct node* list = t- list[pos]; struct node* temp = list; while(temp) { if(temp- key == key) { return temp- val; } temp = temp- next; } return -1; } int* twoSum(int* nums, int numsSize, int target) { int* res = malloc(sizeof(int) * 2); struct table* t = createTable(numsSize); for(int i = 0; i numsSize; i++) { int pos = search(t, target - nums[i]); if(pos -1) { res[0] = pos; res[1] = i; return res; } insert(t, nums[i], i); } return res; }","title":"1 Two Sum"},{"location":"LeetCode0001_TwoSum/lc0001/#1-two-sum","text":"","title":"1. Two Sum"},{"location":"LeetCode0001_TwoSum/lc0001/#description","text":"Given an array of integers, return indices of the two numbers such that they add up to a specific target. You may assume that each input would have exactly one solution, and you may not use the same element twice.","title":"Description"},{"location":"LeetCode0001_TwoSum/lc0001/#example","text":"Given nums = [2, 7, 11, 15], target = 9, Because nums[0] + nums[1] = 2 + 7 = 9, return [0, 1].","title":"Example"},{"location":"LeetCode0001_TwoSum/lc0001/#java","text":"public int[] twoSum(int[] nums, int target) { HashMap Integer, Integer map = new HashMap (); for(int i = 0; i nums.length; i++) { if(map.containsKey(target - nums[i]) map.get(target - nums[i]) != i) { return new int[]{map.get(target - nums[i]), i}; } map.put(nums[i], i); } return new int[]{}; }","title":"Java"},{"location":"LeetCode0001_TwoSum/lc0001/#javascript","text":"var twoSum = function(nums, target) { var res = []; var map = new Map(); for(var i = 0; i nums.length; i++) { if(map.has(target - nums[i])) { res.push(map.get(target - nums[i])); res.push(i); return res; } map.set(nums[i], i); } return res; }","title":"JavaScript"},{"location":"LeetCode0001_TwoSum/lc0001/#c","text":"public: vector int twoSum(vector int nums, int target) { unordered_map int, int map; for(int i = 0; i nums.size(); i++) { if(map.count(target - nums[i])) { return {map[target - nums[i]], i}; } map[nums[i]] = i; } return {}; }","title":"C++"},{"location":"LeetCode0001_TwoSum/lc0001/#c_1","text":"struct node{ int key; int val; int count; struct node* next; }; struct table{ int size; struct node** list; }; struct table* createTable(int size) { struct table* t = (struct table*)malloc(sizeof(struct table)); t- size = size; t- list = (struct node**)malloc(sizeof(struct node*) * size); for(int i = 0; i size; i++) { t- list[i] = NULL; } return t; } int hashCode(struct table *t, int key) { if(key 0) return -(key % t- size); return key % t- size; } void insert(struct table *t, int key, int val) { int pos = hashCode(t, key); struct node* list = t- list[pos]; struct node* newNode = (struct node*)malloc(sizeof(struct node)); struct node* temp = list; while(temp) { if(temp- key == key){ temp- count = temp- count + 1; return; } temp = temp- next; } newNode- key = key; newNode- val = val; newNode- count = 1; newNode- next = list; t- list[pos] = newNode; return; } int search(struct table* t, int key) { int pos = hashCode(t, key); struct node* list = t- list[pos]; struct node* temp = list; while(temp) { if(temp- key == key) { return temp- val; } temp = temp- next; } return -1; } int* twoSum(int* nums, int numsSize, int target) { int* res = malloc(sizeof(int) * 2); struct table* t = createTable(numsSize); for(int i = 0; i numsSize; i++) { int pos = search(t, target - nums[i]); if(pos -1) { res[0] = pos; res[1] = i; return res; } insert(t, nums[i], i); } return res; }","title":"C"}]}